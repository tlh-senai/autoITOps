name: auto_docker
run-name: ${{ github.actor }} Pipeline Deploy ü´µ
on: 
  push:
    branches:
      - "develop"
    paths-ignore:
      - "docs/**"
      - "images/**"
      - "*.md"
      - "*.dockerignore"
jobs:
  githubactions-senai:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: INSTALL PACKAGES
        run: |
          sudo apt update -y
          sudo apt-get install figlet -y
          curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
          chmod +x ./snyk
          mv ./snyk /usr/local/bin/
            
      - name: Snyk Auth
        run: |
          snyk -d auth $SNYK_TOKEN
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_AUTH_TOKEN }}
          
      - name: Configurar AWS CLI
        if: always()
        run: |
          echo "AWS CLI" | figlet -f small
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region us-east-1
          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_DEFAULT_REGION="us-east-1"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: DockerLint (CI)
        run: |
          echo "DOCKERLINT" | figlet -f small
          docker run --rm -i hadolint/hadolint < Dockerfile || true
      
      - name: Docker Login
        if: always()
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Docker build (CI)
        if: always()
        run: |
          echo $AWS_ACCESS_KEY_ID
          docker build --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_DEFAULT_REGION="us-east-1" -t apicontainer .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Docker Analysis (CI)
        if: always()
        run: |
          echo "VULNERABILIDADES" | figlet -c -f small
          snyk container test apicontainer:latest || true
          
      - name: Docker Push (CD)
        if: always()
        run: |
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c 1-5)
          echo $COMMIT_SHA

          docker tag apicontainer:latest tlhsenai/apicontainer:$COMMIT_SHA
          docker push tlhsenai/apicontainer:$COMMIT_SHA

      - name: Provision AWS EC2 with Terraform and setup Docker
        if: always()
        run: |
          # Step 1: Install Terraform
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform -y

          # Step 2: Create Terraform configuration files (e.g., main.tf)
          cat <<EOF > main.tf
          provider "aws" {
            region = "us-east-1"
          }

          resource "aws_instance" "ec2_instance" {
            ami           = "your_ami_id"
            instance_type = "t2.micro"
            # Add other instance configuration as needed
          }
          EOF

          # Step 3: Initialize and apply Terraform configuration
          terraform init
          terraform apply -auto-approve

          # Step 4: Write bootstrap script to setup Docker
          cat <<EOF > bootstrap.sh
          #!/bin/bash
          sudo yum update -y
          sudo yum install docker -y
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker ec2-user
          EOF

          # Step 5: Run bootstrap script on EC2 instance
          chmod +x bootstrap.sh
          ssh -i /path/to/your/aws/key.pem ec2-user@your_instance_ip './bootstrap.sh'

          # Step 6: Download Docker image and start container
          ssh -i /path/to/your/aws/key.pem ec2-user@your_instance_ip 'docker pull tlhsenai/apicontainer:$COMMIT_SHA && docker run -d -p 80:80 tlhsenai/apicontainer:$COMMIT_SHA'

      - run: echo "üçè This job's status is ${{ job.status }}."
